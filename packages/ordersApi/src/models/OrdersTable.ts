import {
    attribute,
    autoGeneratedHashKey,
    table,
} from "@aws/dynamodb-data-mapper-annotations";
import {
    CustomType
} from "@aws/dynamodb-data-marshaller"

import { DynamoDB } from "aws-sdk";

const dateType: CustomType<Date> = {
    type: 'Custom',
    marshall: (input: Date): DynamoDB.AttributeValue => {
        return { 
            S: (typeof input === "string") ? input : input.toISOString() 
        }
    },
    unmarshall: (persistedValue: DynamoDB.AttributeValue): Date => new Date(persistedValue.S!)
}
@table("Orders")
export class Order {
    constructor(params?: any){
        if(params){
            this.orderId = params.orderId;
            this.orderStatus = params.orderStatus;
            this.phoneNumber = params.phoneNumber,
            this.pizzaSize = params.pizzaSize,
            this.pizzaType = params.pizzaType,
            this.customer = params.customer,
            this.createdAt = params.createdAt,
            this.updatedAt = params.updatedAt
        }
    }
    @autoGeneratedHashKey()
        orderId?: string;
    @attribute()
        orderStatus?: string;
    @attribute()
        phoneNumber?: string;
    @attribute()
        pizzaSize?: string;
    @attribute()
        pizzaType?: string;
    @attribute()
        customer?: string;
    @attribute(dateType)
        createdAt?: Date;
    @attribute(dateType)
        updatedAt?: Date;
}